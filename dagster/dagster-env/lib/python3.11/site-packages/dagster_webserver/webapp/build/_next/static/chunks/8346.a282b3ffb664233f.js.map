{"version":3,"file":"static/chunks/8346.a282b3ffb664233f.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/automation/AutomationStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/automation/AutomationBulkActionMenu.tsx","webpack://_N_E/../ui-core/src/automation/VirtualizedAutomationRow.tsx","webpack://_N_E/../ui-core/src/automation/VirtualizedAutomationScheduleRow.tsx","webpack://_N_E/../ui-core/src/automation/VirtualizedAutomationSensorRow.tsx","webpack://_N_E/../ui-core/src/automation/AutomationsTable.tsx","webpack://_N_E/../ui-core/src/automation/MergedAutomationRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewExpansionKey.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/ui/findDuplicateRepoNames.tsx","webpack://_N_E/../ui-core/src/ui/useRepoExpansionState.tsx"],"sourcesContent":["import {useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n} from '@dagster-io/ui-components';\nimport {useEffect} from 'react';\n\nimport {assertUnreachable} from '../app/Util';\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {START_SCHEDULE_MUTATION, STOP_SCHEDULE_MUTATION} from '../schedules/ScheduleMutations';\nimport {\n  StartThisScheduleMutation,\n  StartThisScheduleMutationVariables,\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from '../schedules/types/ScheduleMutations.types';\nimport {START_SENSOR_MUTATION, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {\n  StartSensorMutation,\n  StartSensorMutationVariables,\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from '../sensors/types/SensorMutations.types';\nimport {RepoAddress} from '../workspace/types';\n\nexport interface AutomationInfo {\n  repoAddress: RepoAddress;\n  name: string;\n  type: 'sensor' | 'schedule';\n  instigationState: BasicInstigationStateFragment;\n}\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  automations: AutomationInfo[];\n}\n\nexport const AutomationStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, automations} = props;\n  const count = automations.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSensor] = useMutation<StartSensorMutation, StartSensorMutationVariables>(\n    START_SENSOR_MUTATION,\n  );\n\n  const [stopSensor] = useMutation<StopRunningSensorMutation, StopRunningSensorMutationVariables>(\n    STOP_SENSOR_MUTATION,\n  );\n\n  const [startSchedule] = useMutation<\n    StartThisScheduleMutation,\n    StartThisScheduleMutationVariables\n  >(START_SCHEDULE_MUTATION);\n\n  const [stopSchedule] = useMutation<StopScheduleMutation, StopScheduleMutationVariables>(\n    STOP_SCHEDULE_MUTATION,\n  );\n\n  const start = async (automation: AutomationInfo) => {\n    const {repoAddress, name, type} = automation;\n    const repoValues = {\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    };\n\n    switch (type) {\n      case 'sensor': {\n        const {data} = await startSensor({\n          variables: {sensorSelector: {...repoValues, sensorName: name}},\n        });\n\n        switch (data?.startSensor.__typename) {\n          case 'Sensor':\n            dispatch({type: 'update-success'});\n            return;\n          case 'SensorNotFoundError':\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.startSensor.message,\n            });\n        }\n\n        break;\n      }\n\n      case 'schedule': {\n        const {data} = await startSchedule({\n          variables: {scheduleSelector: {...repoValues, scheduleName: name}},\n        });\n\n        switch (data?.startSchedule.__typename) {\n          case 'ScheduleStateResult':\n            dispatch({type: 'update-success'});\n            return;\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.startSchedule.message,\n            });\n        }\n\n        break;\n      }\n\n      default:\n        assertUnreachable(type);\n    }\n  };\n\n  const stop = async (automation: AutomationInfo) => {\n    const {name, type, instigationState} = automation;\n    const variables = {id: instigationState.id};\n\n    switch (type) {\n      case 'sensor': {\n        const {data} = await stopSensor({variables});\n        switch (data?.stopSensor.__typename) {\n          case 'StopSensorMutationResult':\n            dispatch({type: 'update-success'});\n            return;\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.stopSensor.message,\n            });\n        }\n        break;\n      }\n\n      case 'schedule': {\n        const {data} = await stopSchedule({variables});\n        switch (data?.stopRunningSchedule.__typename) {\n          case 'ScheduleStateResult':\n            dispatch({type: 'update-success'});\n            return;\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.stopRunningSchedule.message,\n            });\n        }\n        break;\n      }\n\n      default:\n        assertUnreachable(type);\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const automation of automations) {\n      if (openWithIntent === 'start') {\n        await start(automation);\n      } else {\n        await stop(automation);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${\n                count === 1 ? '1 automation' : `${count} automations`\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${\n              count === 1 ? '1 automation' : `${count} automations`\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Automations are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 automation' : `${count} automations`}`\n            : `Stop ${count === 1 ? '1 automation' : `${count} automations`}`;\n        return (\n          <>\n            <Button onClick={onClose}>Cancel</Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 automation' : `${count} automations`}`\n            : `Stopping ${count === 1 ? '1 automation' : `${count} automations`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>\n          Please do not close the window or navigate away while automations are being updated.\n        </div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 automation' : `${successCount} automations`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 automation' : `${successCount} automations`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.accentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${\n                      errorCount === 1 ? '1 automation' : `${errorCount} automations`\n                    }:`\n                  : `Could not stop ${\n                      errorCount === 1 ? '1 automation' : `${errorCount} automations`\n                    }:`}\n              </div>\n            </Group>\n            <ul style={{margin: '8px 0'}}>\n              {Object.keys(errors).map((automationName) => (\n                <li key={automationName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{automationName}:</strong>\n                    {errors[automationName] ? <div>{errors[automationName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start automations' : 'Stop automations'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {AutomationInfo, AutomationStateChangeDialog} from './AutomationStateChangeDialog';\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\ninterface Props {\n  automations: AutomationInfo[];\n  onDone: () => void;\n}\n\nexport const AutomationBulkActionMenu = (props: Props) => {\n  const {automations, onDone} = props;\n  const count = automations.length;\n\n  const [openWithIntent, setOpenWithIntent] = useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = useMemo(() => {\n    return instigationStateSummary(automations.map(({instigationState}) => instigationState));\n  }, [automations]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 automation' : `${count} automations`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 automation' : `${count} automations`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <AutomationStateChangeDialog\n        openWithIntent={openWithIntent}\n        automations={automations}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {Box} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nimport {HeaderCell, HeaderRow} from '../ui/VirtualizedTable';\n\nexport const TEMPLATE_COLUMNS = '60px minmax(400px, 1.5fr) 240px 1fr 200px 200px';\n\nexport const VirtualizedAutomationHeader = ({checkbox}: {checkbox: React.ReactNode}) => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>\n        <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n      </HeaderCell>\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Type</HeaderCell>\n      <HeaderCell>Target</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nexport const AutomationRowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n","import {useLazyQuery} from '@apollo/client';\nimport {Box, Caption, Checkbox, MiddleTruncate, Tooltip} from '@dagster-io/ui-components';\nimport {forwardRef, useCallback, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AutomationTargetList} from './AutomationTargetList';\nimport {AutomationRowGrid} from './VirtualizedAutomationRow';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {CronTag} from '../schedules/CronTag';\nimport {SCHEDULE_ASSET_SELECTIONS_QUERY} from '../schedules/ScheduleAssetSelectionsQuery';\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {\n  ScheduleAssetSelectionQuery,\n  ScheduleAssetSelectionQueryVariables,\n} from '../schedules/types/ScheduleAssetSelectionsQuery.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RowCell} from '../ui/VirtualizedTable';\nimport {SINGLE_SCHEDULE_QUERY} from '../workspace/VirtualizedScheduleRow';\nimport {LoadingOrNone, useDelayedRowQuery} from '../workspace/VirtualizedWorkspaceTable';\nimport {RepoAddress} from '../workspace/types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from '../workspace/types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface ScheduleRowProps {\n  index: number;\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\nexport const VirtualizedAutomationScheduleRow = forwardRef(\n  (props: ScheduleRowProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {index, name, repoAddress, checked, onToggleChecked} = props;\n\n    const [querySchedule, queryResult] = useLazyQuery<\n      SingleScheduleQuery,\n      SingleScheduleQueryVariables\n    >(SINGLE_SCHEDULE_QUERY, {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          scheduleName: name,\n        },\n      },\n      notifyOnNetworkStatusChange: true,\n    });\n    useBlockTraceOnQueryResult(queryResult, 'SingleScheduleQuery');\n\n    const [queryScheduleAssetSelection, scheduleAssetSelectionQueryResult] = useLazyQuery<\n      ScheduleAssetSelectionQuery,\n      ScheduleAssetSelectionQueryVariables\n    >(SCHEDULE_ASSET_SELECTIONS_QUERY, {\n      variables: {\n        scheduleSelector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          scheduleName: name,\n        },\n      },\n    });\n\n    useBlockTraceOnQueryResult(scheduleAssetSelectionQueryResult, 'ScheduleAssetSelectionQuery');\n\n    useDelayedRowQuery(\n      useCallback(() => {\n        querySchedule();\n        queryScheduleAssetSelection();\n      }, [querySchedule, queryScheduleAssetSelection]),\n    );\n\n    useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n    useQueryRefreshAtInterval(scheduleAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n    const {data} = queryResult;\n\n    const scheduleData = useMemo(() => {\n      if (data?.scheduleOrError.__typename !== 'Schedule') {\n        return null;\n      }\n\n      return data.scheduleOrError;\n    }, [data]);\n\n    const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n      if (onToggleChecked && e.target instanceof HTMLInputElement) {\n        const {checked} = e.target;\n        const shiftKey =\n          e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n        onToggleChecked({checked, shiftKey});\n      }\n    };\n\n    const scheduleState = scheduleData?.scheduleState;\n\n    const checkboxState = useMemo(() => {\n      if (!scheduleState) {\n        return {disabled: true};\n      }\n\n      const {hasStartPermission, hasStopPermission, status} = scheduleState;\n      if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n        return {disabled: true, message: 'You do not have permission to stop this schedule'};\n      }\n      if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n        return {disabled: true, message: 'You do not have permission to start this schedule'};\n      }\n      return {disabled: false};\n    }, [scheduleState]);\n\n    const tick = scheduleData?.scheduleState.ticks[0];\n    const targets = scheduleData?.pipelineName ? [{pipelineName: scheduleData.pipelineName}] : null;\n    const assetSelection =\n      scheduleAssetSelectionQueryResult.data?.scheduleOrError.__typename === 'Schedule'\n        ? scheduleAssetSelectionQueryResult.data.scheduleOrError.assetSelection\n        : null;\n\n    return (\n      <div ref={ref} data-index={index}>\n        <AutomationRowGrid border=\"bottom\">\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n          <RowCell>\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'flex-start'}}>\n              {scheduleData ? (\n                <Box flex={{direction: 'column', gap: 4}}>\n                  {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n                  <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n                  {errorDisplay(\n                    scheduleData.scheduleState.status,\n                    scheduleData.scheduleState.runningCount,\n                  )}\n                </Box>\n              ) : (\n                <div style={{width: 30}} />\n              )}\n              <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </Box>\n          </RowCell>\n          <RowCell>\n            {scheduleData ? (\n              <Box flex={{direction: 'column', gap: 4}}>\n                <CronTag\n                  cronSchedule={scheduleData.cronSchedule}\n                  executionTimezone={scheduleData.executionTimezone}\n                />\n                {scheduleData.scheduleState.nextTick &&\n                scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                  <Caption>\n                    <div\n                      style={{\n                        overflow: 'hidden',\n                        whiteSpace: 'nowrap',\n                        maxWidth: '100%',\n                        textOverflow: 'ellipsis',\n                      }}\n                    >\n                      Next tick:&nbsp;\n                      <TimestampDisplay\n                        timestamp={scheduleData.scheduleState.nextTick.timestamp!}\n                        timezone={scheduleData.executionTimezone}\n                        timeFormat={{showSeconds: false, showTimezone: true}}\n                      />\n                    </div>\n                  </Caption>\n                ) : null}\n              </Box>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            <div>\n              <AutomationTargetList\n                repoAddress={repoAddress}\n                automationType=\"schedule\"\n                targets={targets}\n                assetSelection={assetSelection}\n              />\n            </div>\n          </RowCell>\n          <RowCell>\n            {tick ? (\n              <div>\n                <TickStatusTag tick={tick} />\n              </div>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {scheduleData?.scheduleState && scheduleData?.scheduleState.runs[0] ? (\n              <LastRunSummary\n                run={scheduleData.scheduleState.runs[0]}\n                name={name}\n                showButton={false}\n                showHover\n                showSummary={false}\n              />\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n        </AutomationRowGrid>\n      </div>\n    );\n  },\n);\n","import {useLazyQuery} from '@apollo/client';\nimport {Box, Checkbox, MiddleTruncate, Tag, Tooltip} from '@dagster-io/ui-components';\nimport {forwardRef, useCallback, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AutomationTargetList} from './AutomationTargetList';\nimport {AutomationRowGrid} from './VirtualizedAutomationRow';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {SENSOR_ASSET_SELECTIONS_QUERY} from '../sensors/SensorRoot';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from '../sensors/types/SensorRoot.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RowCell} from '../ui/VirtualizedTable';\nimport {SENSOR_TYPE_META, SINGLE_SENSOR_QUERY} from '../workspace/VirtualizedSensorRow';\nimport {LoadingOrNone, useDelayedRowQuery} from '../workspace/VirtualizedWorkspaceTable';\nimport {RepoAddress} from '../workspace/types';\nimport {\n  SingleSensorQuery,\n  SingleSensorQueryVariables,\n} from '../workspace/types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface Props {\n  index: number;\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\nexport const VirtualizedAutomationSensorRow = forwardRef(\n  (props: Props, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {index, name, repoAddress, checked, onToggleChecked} = props;\n\n    const [querySensor, sensorQueryResult] = useLazyQuery<\n      SingleSensorQuery,\n      SingleSensorQueryVariables\n    >(SINGLE_SENSOR_QUERY, {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n    });\n\n    useBlockTraceOnQueryResult(sensorQueryResult, 'SingleSensorQuery');\n\n    const [querySensorAssetSelection, sensorAssetSelectionQueryResult] = useLazyQuery<\n      SensorAssetSelectionQuery,\n      SensorAssetSelectionQueryVariables\n    >(SENSOR_ASSET_SELECTIONS_QUERY, {\n      variables: {\n        sensorSelector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n    });\n\n    useBlockTraceOnQueryResult(sensorAssetSelectionQueryResult, 'SensorAssetSelectionQuery');\n\n    useDelayedRowQuery(\n      useCallback(() => {\n        querySensor();\n        querySensorAssetSelection();\n      }, [querySensor, querySensorAssetSelection]),\n    );\n\n    useQueryRefreshAtInterval(sensorQueryResult, FIFTEEN_SECONDS);\n    useQueryRefreshAtInterval(sensorAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n    const {data} = sensorQueryResult;\n\n    const sensorData = useMemo(() => {\n      if (data?.sensorOrError.__typename !== 'Sensor') {\n        return null;\n      }\n\n      return data.sensorOrError;\n    }, [data]);\n\n    const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n      if (onToggleChecked && e.target instanceof HTMLInputElement) {\n        const {checked} = e.target;\n        const shiftKey =\n          e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n        onToggleChecked({checked, shiftKey});\n      }\n    };\n\n    const sensorState = sensorData?.sensorState;\n\n    const checkboxState = useMemo(() => {\n      if (!sensorState) {\n        return {disabled: true};\n      }\n\n      const {hasStartPermission, hasStopPermission, status} = sensorState;\n      if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n        return {disabled: true, message: 'You do not have permission to stop this sensor'};\n      }\n      if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n        return {disabled: true, message: 'You do not have permission to start this sensor'};\n      }\n      return {disabled: false};\n    }, [sensorState]);\n\n    const tick = sensorData?.sensorState.ticks[0];\n\n    const sensorType = sensorData?.sensorType;\n    const sensorInfo = sensorType ? SENSOR_TYPE_META[sensorType] : null;\n    const selectedAssets =\n      sensorAssetSelectionQueryResult.data?.sensorOrError.__typename === 'Sensor'\n        ? sensorAssetSelectionQueryResult.data.sensorOrError.assetSelection\n        : null;\n\n    return (\n      <div ref={ref} data-index={index}>\n        <AutomationRowGrid border=\"bottom\">\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n          <RowCell>\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'flex-start'}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              {sensorData ? (\n                <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n              ) : (\n                <div style={{width: 30}} />\n              )}\n              <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </Box>\n          </RowCell>\n          <RowCell>\n            <div>\n              {sensorInfo ? (\n                sensorInfo.description ? (\n                  <Tooltip\n                    content={<div style={{maxWidth: '300px'}}>{sensorInfo.description}</div>}\n                    placement=\"top\"\n                  >\n                    <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n                  </Tooltip>\n                ) : (\n                  <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n                )\n              ) : null}\n            </div>\n          </RowCell>\n          <RowCell>\n            {sensorData ? (\n              <div>\n                <AutomationTargetList\n                  targets={sensorData.targets || null}\n                  repoAddress={repoAddress}\n                  assetSelection={selectedAssets}\n                  automationType={sensorData.sensorType}\n                />\n              </div>\n            ) : (\n              <LoadingOrNone queryResult={sensorAssetSelectionQueryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {tick ? (\n              <div>\n                <TickStatusTag tick={tick} />\n              </div>\n            ) : (\n              <LoadingOrNone queryResult={sensorQueryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {sensorData?.sensorState && sensorData?.sensorState.runs[0] ? (\n              <LastRunSummary\n                run={sensorData.sensorState.runs[0]}\n                name={name}\n                showButton={false}\n                showHover\n                showSummary={false}\n              />\n            ) : (\n              <LoadingOrNone queryResult={sensorQueryResult} />\n            )}\n          </RowCell>\n        </AutomationRowGrid>\n      </div>\n    );\n  },\n);\n","import {Box, Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {VirtualizedAutomationHeader} from './VirtualizedAutomationRow';\nimport {VirtualizedAutomationScheduleRow} from './VirtualizedAutomationScheduleRow';\nimport {VirtualizedAutomationSensorRow} from './VirtualizedAutomationSensorRow';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {OVERVIEW_COLLAPSED_KEY} from '../overview/OverviewExpansionKey';\nimport {makeAutomationKey} from '../sensors/makeSensorKey';\nimport {Container, DynamicRowContainer, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {DynamicRepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: string[];\n  sensors: string[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: string}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: string};\n\nexport const AutomationsTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules, sensors}) => {\n      flat.push({\n        type: 'header',\n        repoAddress,\n        scheduleCount: schedules.length,\n        sensorCount: sensors.length,\n      });\n      const repoKey = repoAddressAsHumanString(repoAddress);\n\n      if (expandedKeys.includes(repoKey)) {\n        const sensorKeys = new Set(sensors);\n        const scheduleKeys = new Set(schedules);\n        const repoAutomations = [...sensors, ...schedules].sort((a, b) =>\n          COMMON_COLLATOR.compare(a, b),\n        );\n\n        repoAutomations.forEach((name) => {\n          if (sensorKeys.has(name)) {\n            flat.push({type: 'sensor', repoAddress, sensor: name});\n          } else if (scheduleKeys.has(name)) {\n            flat.push({type: 'schedule', repoAddress, schedule: name});\n          }\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 15,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedAutomationHeader checkbox={headerCheckbox} />\n        <Inner $totalHeight={totalHeight}>\n          <DynamicRowContainer $start={items[0]?.start ?? 0}>\n            {items.map(({index, key}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <DynamicRepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    ref={rowVirtualizer.measureElement}\n                    index={index}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Box flex={{direction: 'row', gap: 4}}>\n                        <Tooltip\n                          content={\n                            row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`\n                          }\n                          placement=\"top\"\n                        >\n                          <Tag icon=\"sensors\">{row.sensorCount}</Tag>\n                        </Tooltip>\n                        <Tooltip\n                          content={\n                            row.scheduleCount === 1\n                              ? '1 schedule'\n                              : `${row.scheduleCount} schedules`\n                          }\n                          placement=\"top\"\n                        >\n                          <Tag icon=\"schedule\">{row.scheduleCount}</Tag>\n                        </Tooltip>\n                      </Box>\n                    }\n                  />\n                );\n              }\n\n              if (type === 'sensor') {\n                const sensorKey = makeAutomationKey(row.repoAddress, row.sensor);\n                return (\n                  <VirtualizedAutomationSensorRow\n                    key={key}\n                    index={index}\n                    ref={rowVirtualizer.measureElement}\n                    name={row.sensor}\n                    checked={checkedKeys.has(sensorKey)}\n                    onToggleChecked={onToggleCheckFactory(sensorKey)}\n                    repoAddress={row.repoAddress}\n                  />\n                );\n              }\n\n              if (type === 'schedule') {\n                const scheduleKey = makeAutomationKey(row.repoAddress, row.schedule);\n                return (\n                  <VirtualizedAutomationScheduleRow\n                    key={key}\n                    index={index}\n                    ref={rowVirtualizer.measureElement}\n                    name={row.schedule}\n                    checked={checkedKeys.has(scheduleKey)}\n                    onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                    repoAddress={row.repoAddress}\n                  />\n                );\n              }\n\n              return <div key={key} />;\n            })}\n          </DynamicRowContainer>\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {Box, NonIdealState, SpinnerWithText, TextInput, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {AutomationBulkActionMenu} from './AutomationBulkActionMenu';\nimport {AutomationsTable} from './AutomationsTable';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {makeAutomationKey} from '../sensors/makeSensorKey';\nimport {useFilters} from '../ui/BaseFilters';\nimport {useStaticSetFilter} from '../ui/BaseFilters/useStaticSetFilter';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {WorkspaceLocationNodeFragment} from '../workspace/types/WorkspaceQueries.types';\n\ntype AutomationType = 'schedules' | 'sensors';\n\nconst AUTOMATION_TYPE_FILTERS = {\n  schedules: {\n    label: 'Schedules',\n    value: {type: 'schedules', label: 'Schedules'},\n    match: ['schedules'],\n  },\n  sensors: {\n    label: 'Sensors',\n    value: {type: 'sensors', label: 'Sensors'},\n    match: ['sensors'],\n  },\n};\n\nconst ALL_AUTOMATION_VALUES = Object.values(AUTOMATION_TYPE_FILTERS);\n\nexport const MergedAutomationRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Automation');\n\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n    refetch,\n  } = useContext(WorkspaceContext);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const [automationTypes, setAutomationTypes] = useQueryPersistedState<Set<AutomationType>>({\n    encode: (vals) => ({automationType: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.automationType?.split(',') as AutomationType[]) || []),\n  });\n\n  const automationFilterState = useMemo(() => {\n    return new Set(\n      Array.from(automationTypes).map(\n        (type) => AUTOMATION_TYPE_FILTERS[type as AutomationType].value,\n      ),\n    );\n  }, [automationTypes]);\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n  const automationTypeFilter = useStaticSetFilter({\n    name: 'Automation type',\n    allValues: ALL_AUTOMATION_VALUES,\n    icon: 'auto_materialize_policy',\n    getStringValue: (value) => value.label,\n    state: automationFilterState,\n    renderLabel: ({value}) => <span>{value.label}</span>,\n    onStateChanged: (state) => {\n      setAutomationTypes(new Set(Array.from(state).map((value) => value.type as AutomationType)));\n    },\n  });\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter, automationTypeFilter],\n    [codeLocationFilter, runningStateFilter, automationTypeFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(cachedEntries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({sensors, schedules, ...rest}) => {\n      return {\n        ...rest,\n        sensors: sensors.filter(({sensorState}) => {\n          if (runningState.size && !runningState.has(sensorState.status)) {\n            return false;\n          }\n          if (automationTypes.size && !automationTypes.has('sensors')) {\n            return false;\n          }\n          return true;\n        }),\n        schedules: schedules.filter(({scheduleState}) => {\n          if (runningState.size && !runningState.has(scheduleState.status)) {\n            return false;\n          }\n          if (automationTypes.size && !automationTypes.has('schedules')) {\n            return false;\n          }\n          return true;\n        }),\n      };\n    });\n  }, [repoBuckets, automationTypes, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules, sensors}) => ({\n        repoAddress,\n        schedules: schedules\n          .filter(({name}) => name.toLocaleLowerCase().includes(searchToLower))\n          .map(({name}) => name),\n        sensors: sensors\n          .filter(({name}) => name.toLocaleLowerCase().includes(searchToLower))\n          .map(({name}) => name),\n      }))\n      .filter(({sensors, schedules}) => sensors.length > 0 || schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  // Collect all automations across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedAutomations = useMemo(() => {\n    return filteredBuckets\n      .map(({repoAddress, schedules, sensors}) => {\n        return [\n          ...sensors\n            .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n            .map(({name, sensorState}) => ({\n              repoAddress,\n              name,\n              type: 'sensor' as const,\n              instigationState: sensorState,\n            })),\n          ...schedules\n            .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n            .map(({name, scheduleState}) => ({\n              repoAddress,\n              name,\n              type: 'schedule' as const,\n              instigationState: scheduleState,\n            })),\n        ];\n      })\n      .flat();\n  }, [filteredBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedAutomationKeys = useMemo(() => {\n    return allPermissionedAutomations.map(({repoAddress, name}) =>\n      makeAutomationKey(repoAddress, name),\n    );\n  }, [allPermissionedAutomations]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedAutomationKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules, sensors}) => {\n          return [...schedules, ...sensors].map((name) => makeAutomationKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedAutomationKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedAutomationKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedAutomations = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedAutomations.filter(({repoAddress, name}) => {\n      return checkedKeysOnScreen.has(makeAutomationKey(repoAddress, name));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedAutomations, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedAutomationKeys.length > 0;\n  const checkedCount = checkedAutomations.length;\n  const anyAutomationsVisible = permissionedKeysOnScreen.length > 0;\n\n  const content = () => {\n    if (workspaceLoading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} padding={{top: 64}}>\n          <SpinnerWithText label=\"Loading automations…\" />\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching automations\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No automations matching <strong>{searchValue}</strong> were found in the\n                    selected code locations\n                  </div>\n                ) : (\n                  <div>\n                    No automations matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No automations\"\n            description={\n              anyReposHidden\n                ? 'No automations were found in the selected code locations'\n                : 'No matching automations'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <AutomationsTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anyAutomationsVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <AutomationBulkActionMenu automations={checkedAutomations} onDone={() => refetch()} />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {content()}\n    </Box>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default MergedAutomationRoot;\n\nconst buildBuckets = (\n  locationEntries: Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n) => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n","export const OVERVIEW_COLLAPSED_KEY = 'overview-collapsed-state';\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","export const findDuplicateRepoNames = (repoNames: string[]) => {\n  const uniques = new Set<string>();\n  const duplicates = new Set<string>();\n  repoNames.forEach((repoName) => {\n    if (uniques.has(repoName)) {\n      duplicates.add(repoName);\n    } else {\n      uniques.add(repoName);\n    }\n  });\n  return duplicates;\n};\n","import {useCallback, useContext, useMemo} from 'react';\n\nimport {AppContext} from '../app/AppContext';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\nexport const buildStorageKey = (basePath: string, key: string) => `${basePath}:dagster.${key}`;\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of repository containers,\n * e.g. for the left nav or run timeline.\n */\nexport const useRepoExpansionState = (collapsedKey: string, allKeys: string[]) => {\n  const {basePath} = useContext(AppContext);\n\n  const collapsedStorageKey = buildStorageKey(basePath, collapsedKey);\n  const [collapsedKeys, setCollapsedKeys] = useStateWithStorage<string[]>(\n    collapsedStorageKey,\n    validateExpandedKeys,\n  );\n\n  const onToggle = useCallback(\n    (_key: string | RepoAddress) => {\n      const key = typeof _key === 'object' ? repoAddressAsHumanString(_key) : _key;\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        if (nextCollapsedKeys.has(key)) {\n          nextCollapsedKeys.delete(key);\n        } else {\n          nextCollapsedKeys.add(key);\n        }\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [setCollapsedKeys],\n  );\n\n  const onToggleAll = useCallback(\n    (expand: boolean) => {\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        allKeys.forEach((key) => {\n          expand ? nextCollapsedKeys.delete(key) : nextCollapsedKeys.add(key);\n        });\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [allKeys, setCollapsedKeys],\n  );\n\n  const expandedKeys = useMemo(() => {\n    const collapsedSet = new Set(collapsedKeys);\n    return allKeys.filter((key) => !collapsedSet.has(key));\n  }, [allKeys, collapsedKeys]);\n\n  return useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n      onToggleAll,\n    }),\n    [expandedKeys, onToggle, onToggleAll],\n  );\n};\n"],"names":["AutomationStateChangeDialog","openWithIntent","onClose","onComplete","automations","props","count","length","state","dispatch","useInstigationStateReducer","useEffect","type","startSensor","useMutation","START_SENSOR_MUTATION","stopSensor","STOP_SENSOR_MUTATION","startSchedule","START_SCHEDULE_MUTATION","stopSchedule","STOP_SCHEDULE_MUTATION","start","automation","repoAddress","name","repoValues","repositoryLocationName","location","repositoryName","data","variables","sensorSelector","sensorName","__typename","error","message","scheduleSelector","scheduleName","assertUnreachable","stop","instigationState","id","stopRunningSchedule","mutate","canQuicklyClose","step","jsx_runtime","jsxs","Dialog","isOpen","title","canEscapeKeyClose","canOutsideClickClose","jsx","DialogBody","Group","direction","spacing","progressContent","div","concat","value","completion","completed","ProgressBar","intent","Math","max","animate","NavigationBlock","completionContent","errors","errorCount","Object","keys","successCount","alignItems","Icon","color","Colors","ul","style","margin","map","li","strong","automationName","DialogFooter","buttons","Fragment","Button","onClick","disabled","AutomationBulkActionMenu","onDone","setOpenWithIntent","useState","anyOff","anyOn","useMemo","instigationStateSummary","param","Popover","content","Menu","MenuItem","text","aria-disabled","icon","placement","rightIcon","TEMPLATE_COLUMNS","VirtualizedAutomationHeader","checkbox","HeaderRow","templateColumns","sticky","HeaderCell","position","top","AutomationRowGrid","styled","Box","VirtualizedAutomationScheduleRow","forwardRef","ref","scheduleAssetSelectionQueryResult","index","checked","onToggleChecked","querySchedule","queryResult","useLazyQuery","SINGLE_SCHEDULE_QUERY","selector","notifyOnNetworkStatusChange","useBlockTraceOnQueryResult","queryScheduleAssetSelection","SCHEDULE_ASSET_SELECTIONS_QUERY","useDelayedRowQuery","useCallback","useQueryRefreshAtInterval","FIFTEEN_SECONDS","scheduleData","scheduleOrError","scheduleState","checkboxState","hasStartPermission","hasStopPermission","status","InstigationStatus","RUNNING","STOPPED","tick","ticks","targets","pipelineName","assetSelection","data-index","border","RowCell","Tooltip","canShow","Checkbox","onChange","e","target","HTMLInputElement","shiftKey","nativeEvent","MouseEvent","getModifierState","flex","gap","ScheduleSwitch","schedule","errorDisplay","runningCount","width","Link","to","workspacePathFromAddress","MiddleTruncate","CronTag","cronSchedule","executionTimezone","nextTick","Caption","overflow","whiteSpace","maxWidth","textOverflow","TimestampDisplay","timestamp","timezone","timeFormat","showSeconds","showTimezone","LoadingOrNone","AutomationTargetList","automationType","TickStatusTag","runs","LastRunSummary","run","showButton","showHover","showSummary","VirtualizedAutomationSensorRow","sensorAssetSelectionQueryResult","querySensor","sensorQueryResult","SINGLE_SENSOR_QUERY","querySensorAssetSelection","SENSOR_ASSET_SELECTIONS_QUERY","sensorData","sensorOrError","sensorState","sensorType","sensorInfo","SENSOR_TYPE_META","selectedAssets","SensorSwitch","sensor","description","Tag","AutomationsTable","items","repos","headerCheckbox","checkedKeys","onToggleCheckFactory","parentRef","React","allKeys","repoAddressAsHumanString","expandedKeys","onToggle","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","forEach","schedules","sensors","push","scheduleCount","sensorCount","repoKey","includes","sensorKeys","Set","scheduleKeys","repoAutomations","sort","a","b","COMMON_COLLATOR","compare","has","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","row","ii","overscan","totalHeight","getTotalSize","getVirtualItems","Container","Inner","$totalHeight","DynamicRowContainer","$start","key","DynamicRepoRow","measureElement","expanded","showLocation","rightElement","sensorKey","makeAutomationKey","scheduleKey","AUTOMATION_TYPE_FILTERS","label","match","ALL_AUTOMATION_VALUES","values","MergedAutomationRoot","useTrackPageView","useDocumentTitle","allRepos","visibleRepos","loading","workspaceLoading","cachedData","refetch","useContext","WorkspaceContext","searchValue","setSearchValue","useQueryPersistedState","queryKey","defaults","search","automationTypes","setAutomationTypes","encode","vals","size","Array","from","join","undefined","decode","qs","split","automationFilterState","codeLocationFilter","useCodeLocationFilter","runningStateFilter","useInstigationStatusFilter","automationTypeFilter","useStaticSetFilter","allValues","getStringValue","renderLabel","span","onStateChanged","filters","button","filterButton","activeFiltersJsx","useFilters","repoBuckets","cachedEntries","filter","visibleKeys","visibleRepoKeys","buildBuckets","runningState","filteredBuckets","rest","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","allPermissionedAutomations","filterPermissionedInstigationState","allPermissionedAutomationKeys","checkedIds","onToggleFactory","useSelectionReducer","permissionedKeysOnScreen","filteredKeys","checkedAutomations","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","anyAutomationsVisible","height","padding","horizontal","vertical","justifyContent","grow","TextInput","placeholder","useDisabledButtonTooltipFix","SpinnerWithText","anyReposHidden","CheckAllBox","totalCount","NonIdealState","automation_MergedAutomationRoot","entries","locationEntries","entry","locationOrLoadError","buckets","repo","repositories","buildRepoAddress","sortRepoBuckets","aString","bString","localeCompare","option","repository","repositoryLocation","uniques","duplicates","repoNames","repoName","add","validateExpandedKeys","isArray","parsed","buildStorageKey","basePath","collapsedKey","AppContext","collapsedStorageKey","collapsedKeys","setCollapsedKeys","useStateWithStorage","_key","nextCollapsedKeys","delete","expand","collapsedSet"],"sourceRoot":""}